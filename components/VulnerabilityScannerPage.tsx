import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { GoogleGenAI, Type } from '@google/genai';
import { SpinnerIcon, BugAntIcon, ExclamationTriangleIcon, CloudIcon, EnvelopeIcon, FingerPrintIcon } from './icons';
import { Finding, ScanTarget } from '../App';

type ScanType = 'web' | 'cloud' | 'email' | 'data_leak';

const baseSchema = {
    type: Type.ARRAY,
    items: {
      type: Type.OBJECT,
      properties: {
        vulnerabilityName: {
          type: Type.STRING,
          description: 'Name of the identified issue (e.g., "Cross-Site Scripting (XSS)", "Public S3 Bucket")',
        },
        severity: {
          type: Type.STRING,
          enum: ['Critical', 'High', 'Medium', 'Low', 'Informational'],
          description: 'The severity level of the issue.',
        },
        description: {
          type: Type.STRING,
          description: 'A brief explanation of what the issue is.',
        },
        risk: {
            type: Type.STRING,
            description: 'The negative impact or risk if this issue is exploited or ignored.',
        },
        remediation: {
            type: Type.STRING,
            description: 'Actionable steps to fix or mitigate the issue.',
        },
        affectedFrameworks: {
            type: Type.ARRAY,
            items: { type: Type.STRING },
            description: 'A list of compliance frameworks impacted by this issue (e.g., ["SOC 2", "HIPAA"]).'
        }
      },
      required: ['vulnerabilityName', 'severity', 'description', 'risk', 'remediation', 'affectedFrameworks'],
    },
};

const getPromptAndSchema = (scanType: ScanType, input: string) => {
    const complianceFrameworks = `"SOC 2", "ISO 27001", "HIPAA", "PCI-DSS", "NIST"`;
    switch (scanType) {
        case 'cloud':
            return {
                prompt: `You are a world-class cloud security and compliance analyst. Your task is to perform a simulated security audit of the following cloud configuration snippet.
                IMPORTANT: Your analysis must be based on general knowledge of common misconfigurations in cloud environments (AWS, GCP, Azure).
                Identify a list of 3 to 5 potential misconfigurations or security risks. For each finding, provide all the details required by the JSON schema.
                The severity for at least one finding must be 'High' or 'Critical'.
                Crucially, for each finding, analyze and list which of the following compliance frameworks it would likely violate or impact: ${complianceFrameworks}.
                
                Configuration Snippet:
                \`\`\`
                ${input}
                \`\`\``,
                schema: baseSchema
            };
        case 'email':
            return {
                prompt: `You are a cybersecurity analyst specializing in phishing and malware detection. Analyze the content and headers of the following email to identify potential threats.
                Identify 2 to 4 potential indicators of a scam, phishing attempt, or malware. Examples include "Suspicious Link," "Urgent/Threatening Language," "Spoofed Sender Address," "Generic Salutation," etc.
                For each indicator, provide all the details required by the JSON schema. Explain the risk (e.g., "Could lead to credential theft") and the remediation (e.g., "Do not click the link and delete the email").
                At least one finding should be 'High' or 'Critical' if any suspicious elements are present.
                
                Email Content:
                \`\`\`
                ${input}
                \`\`\``,
                schema: baseSchema
            };
        case 'data_leak':
             return {
                prompt: `You are a data privacy expert. A user wants to know if their email address, "${input}", has been exposed in known data breaches.
                Based on your general knowledge of major historical data breaches (do not access live data), generate a list of 2-3 simulated breach notifications where this user's data could have been exposed.
                For each simulated breach, the 'vulnerabilityName' should be the name of the breached service (e.g., "Imaginary Social Network Breach 2021").
                The 'description' should state that the service was breached and user data was exposed.
                The 'risk' should explain what the exposed data could be used for (e.g., identity theft, phishing).
                The 'remediation' should advise the user to change their password for that service and enable 2FA.
                Severity should be 'High' or 'Critical'. Set 'affectedFrameworks' to an empty array.
                `,
                schema: baseSchema
            };
        case 'web':
        default:
             return {
                prompt: `You are a world-class cybersecurity and compliance analyst. Your task is to perform a simulated vulnerability scan for the website URL: "${input}".
                IMPORTANT: Do not actually access, crawl, or scan the live website. Your analysis must be based on general knowledge of common vulnerabilities found in web applications.
                Identify a list of 5 to 7 potential vulnerabilities. For each vulnerability, provide all the details required by the JSON schema.
                The severity for at least one finding must be 'Critical' or 'High'.
                Crucially, for each vulnerability, analyze and list which of the following compliance frameworks it would likely violate or impact: ${complianceFrameworks}.`,
                schema: baseSchema
            };
    }
}

interface VulnerabilityScannerPageProps {
  setFindings: (findings: Finding[]) => void;
  setScanTarget: (target: ScanTarget) => void;
}

const VulnerabilityScannerPage: React.FC<VulnerabilityScannerPageProps> = ({ setFindings, setScanTarget }) => {
    const [activeTab, setActiveTab] = useState<ScanType>('web');
    const [inputValue, setInputValue] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const navigate = useNavigate();

    const handleScan = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!inputValue.trim()) {
            setError('Please provide an input to scan.');
            return;
        }
        setIsLoading(true);
        setError('');

        try {
            const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });
            const { prompt, schema } = getPromptAndSchema(activeTab, inputValue);

            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash',
                contents: prompt,
                config: {
                    responseMimeType: "application/json",
                    responseSchema: schema,
                }
            });
            
            const results = JSON.parse(response.text);
            
            // FIX: Explicitly type `scanTypeToCategory` to ensure `category` has the correct literal union type, not just `string`.
            const scanTypeToCategory: { [key in ScanType]: Finding['category'] } = {
                web: 'Web',
                cloud: 'Cloud',
                email: 'Email',
                data_leak: 'Data Leak'
            };
            const category = scanTypeToCategory[activeTab];

            const categorizedResults: Finding[] = results.map((r: Omit<Finding, 'category'>) => ({ ...r, category }));
            
            // FIX: Explicitly type `scanTypeToTargetType` to ensure its values are inferred as the correct literal union type for `ScanTarget['type']`.
            const scanTypeToTargetType: { [key in ScanType]: ScanTarget['type'] } = {
                web: 'Website',
                cloud: 'Cloud Configuration',
                email: 'Email',
                data_leak: 'Data Privacy'
            };
            
            setFindings(categorizedResults);
            setScanTarget({ type: scanTypeToTargetType[activeTab], value: inputValue });
            navigate('/dashboard');

        } catch (e) {
            setError('Failed to perform the scan. The AI model may be temporarily unavailable. Please try again.');
            console.error(e);
        } finally {
            setIsLoading(false);
        }
    };
    
    const tabs = [
        { id: 'web', name: 'Website', icon: <BugAntIcon className="w-5 h-5 mr-2" />, placeholder: "https://example.com" },
        { id: 'cloud', name: 'Cloud', icon: <CloudIcon className="w-5 h-5 mr-2" />, placeholder: "Paste a cloud config snippet (e.g., Terraform, IAM JSON)..." },
        { id: 'email', name: 'Email', icon: <EnvelopeIcon className="w-5 h-5 mr-2" />, placeholder: "Paste email content and headers here..." },
        { id: 'data_leak', name: 'Data Leak', icon: <FingerPrintIcon className="w-5 h-5 mr-2" />, placeholder: "Enter email to check for breaches..." },
    ];
    
    const activeTabData = tabs.find(t => t.id === activeTab)!;

    return (
        <div className="container mx-auto px-6 py-12 animate-fade-in-up">
            <div className="text-center max-w-3xl mx-auto">
                 <div className="flex justify-center items-center gap-4 mb-4">
                    {tabs.map(t => <span key={t.id} className={`${activeTab === t.id ? 'text-brand-primary' : 'text-brand-gray/50'}`}>{React.cloneElement(t.icon, {className: "w-12 h-12"})}</span>)}
                </div>
                <h1 className="text-4xl font-bold text-white mb-4">Unified AI Security Scanner</h1>
                <p className="text-lg text-brand-gray">
                    Select a scan type and provide the input to analyze potential security and compliance issues.
                </p>
            </div>

            <div className="mt-10 max-w-3xl mx-auto">
                 <div className="flex border-b border-brand-primary/20 mb-6">
                    {tabs.map(tab => (
                        <button
                            key={tab.id}
                            onClick={() => { setActiveTab(tab.id as ScanType); setInputValue(''); setError(''); }}
                            className={`flex items-center justify-center w-full py-3 px-4 font-semibold transition-colors duration-300 ${activeTab === tab.id ? 'text-brand-primary border-b-2 border-brand-primary' : 'text-brand-gray hover:text-white'}`}
                        >
                            {tab.icon}
                            {tab.name}
                        </button>
                    ))}
                </div>
            
                <form onSubmit={handleScan} className="space-y-4">
                    <div>
                         {activeTab === 'cloud' || activeTab === 'email' ? (
                            <textarea
                                value={inputValue}
                                onChange={(e) => setInputValue(e.target.value)}
                                placeholder={activeTabData.placeholder}
                                className="w-full h-48 bg-brand-dark border border-brand-primary/30 rounded-lg py-3 px-4 text-white placeholder-brand-gray focus:ring-2 focus:ring-brand-primary focus:border-brand-primary transition-all"
                                required
                            />
                         ) : (
                            <input
                                type={activeTab === 'data_leak' ? 'email' : 'url'}
                                value={inputValue}
                                onChange={(e) => setInputValue(e.target.value)}
                                placeholder={activeTabData.placeholder}
                                className="w-full bg-brand-dark border border-brand-primary/30 rounded-lg py-3 px-4 text-white placeholder-brand-gray focus:ring-2 focus:ring-brand-primary focus:border-brand-primary transition-all"
                                required
                            />
                         )}
                    </div>
                    <button
                        type="submit"
                        disabled={isLoading}
                        className="w-full flex items-center justify-center bg-brand-primary text-white font-bold py-3 px-8 rounded-lg shadow-lg shadow-brand-primary/30 hover:bg-opacity-90 transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        {isLoading ? <SpinnerIcon className="w-6 h-6 animate-spin" /> : 'Analyze & View Dashboard'}
                    </button>
                     {error && (
                        <div className="bg-red-500/10 border-l-4 border-red-500 text-red-400 p-4 rounded-lg flex items-center">
                            <ExclamationTriangleIcon className="w-6 h-6 mr-3"/>
                            <span>{error}</span>
                        </div>
                    )}
                </form>
            </div>
        </div>
    );
};

export default VulnerabilityScannerPage;