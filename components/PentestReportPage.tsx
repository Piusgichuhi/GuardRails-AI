import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { GoogleGenAI } from '@google/genai';
import { Finding, ScanTarget } from '../App';
import { DocumentTextIcon, BugAntIcon, SpinnerIcon, ExclamationTriangleIcon } from './icons';

interface PentestReportPageProps {
  findings: Finding[];
  scanTarget: ScanTarget | null;
}

type ViewType = 'technical' | 'layman';

const getPrompt = (view: ViewType, target: ScanTarget | null, findings: Finding[]): string => {
    const findingsString = JSON.stringify(findings, null, 2);
    const targetInfo = target ? `for the target "${target.value}" (${target.type} scan)` : '';

    if (view === 'technical') {
        return `
You are a senior penetration tester writing a formal report for a technical audience (IT department, developers).
Based on the following JSON array of simulated findings ${targetInfo}, write a detailed penetration test report in markdown format.

The report must include these sections:
1.  **Executive Summary:** A brief, high-level overview of all findings across all categories and the overall risk posture.
2.  **Scope & Methodology:** State the scope was ${targetInfo} and the methodology was a simulated, non-intrusive, AI-based analysis.
3.  **Findings & Recommendations:** This is the most important section. Group the findings by their "category" (e.g., "Web Application Findings", "Cloud Configuration Findings"). For each finding in the JSON data, create a subsection. Detail the issue, explain the technical risk, and provide specific, actionable remediation guidance (code examples are helpful if applicable).
4.  **Conclusion:** A summary of the security posture and a final recommendation.

Findings Data:
\`\`\`json
${findingsString}
\`\`\`
`;
    } else { // layman
        return `
You are a cybersecurity consultant explaining security risks to a non-technical business executive (e.g., CEO, manager).
Based on the following JSON array of simulated findings ${targetInfo}, write a simple, easy-to-understand executive summary.

Your task:
-   **Use Analogies:** Explain the risks using simple analogies. For example, describe SQL Injection as leaving the door to your customer database unlocked, or a cloud misconfiguration as leaving the blueprint of your office in a public park.
-   **Focus on Business Impact:** Do not use technical jargon. Instead, explain the real-world consequences: "risk of customer data being stolen," "damage to the company's reputation," "potential fines," "website downtime."
-   **Provide High-Level Solutions:** Describe the *what*, not the *how*. For example, instead of "sanitize user input to prevent XSS," say "We need to ensure our website properly cleans any information users submit to prevent malicious code from running."
-   **Keep it Concise:** The goal is to convey the seriousness and the path forward in plain, reassuring, and professional English. Structure it as a brief memo, summarizing the key risks from all categories of the scan.

Findings Data:
\`\`\`json
${findingsString}
\`\`\`
`;
    }
};


const PentestReportPage: React.FC<PentestReportPageProps> = ({ findings, scanTarget }) => {
    const [view, setView] = useState<ViewType>('technical');
    const [report, setReport] = useState<string>('');
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [error, setError] = useState<string>('');

    useEffect(() => {
        if (findings.length > 0) {
            generateReport();
        }
    }, [view, findings, scanTarget]);

    const generateReport = async () => {
        setIsLoading(true);
        setError('');
        setReport('');

        try {
            const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });
            const prompt = getPrompt(view, scanTarget, findings);
            
            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash',
                contents: prompt,
            });
            
            setReport(response.text);

        } catch (e) {
            setError('Failed to generate the report. The AI may be temporarily unavailable. Please try again.');
            console.error(e);
        } finally {
            setIsLoading(false);
        }
    };


    if (findings.length === 0) {
        return (
            <div className="container mx-auto px-6 py-24 text-center animate-fade-in-up">
                <BugAntIcon className="w-20 h-20 text-brand-primary/50 mx-auto mb-6" />
                <h1 className="text-3xl font-bold text-white mb-4">No Scan Data to Generate Report</h1>
                <p className="text-lg text-brand-gray mb-8">Please run a scan first to generate a pentest report.</p>
                <Link
                    to="/scanner"
                    className="bg-brand-primary text-white font-bold py-3 px-8 rounded-lg shadow-lg shadow-brand-primary/30 hover:bg-opacity-90 transition-all duration-300"
                >
                    Go to Scanner
                </Link>
            </div>
        );
    }

    return (
        <div className="container mx-auto px-6 py-12 animate-fade-in-up">
            <div className="text-center max-w-3xl mx-auto">
                <DocumentTextIcon className="w-16 h-16 text-brand-primary mx-auto mb-4" />
                <h1 className="text-4xl font-bold text-white mb-2">Comprehensive Security Report</h1>
                {scanTarget && <p className="text-brand-gray">
                    AI-generated report for the {scanTarget.type} scan of: <span className="text-brand-primary break-all">{scanTarget.value}</span>
                </p>}
            </div>

            <div className="mt-10 max-w-4xl mx-auto">
                <div className="flex justify-center border-b border-brand-primary/20 mb-6">
                    <button
                        onClick={() => setView('technical')}
                        className={`py-3 px-6 font-semibold transition-colors duration-300 ${view === 'technical' ? 'text-brand-primary border-b-2 border-brand-primary' : 'text-brand-gray hover:text-white'}`}
                    >
                        Technical Report
                    </button>
                    <button
                        onClick={() => setView('layman')}
                        className={`py-3 px-6 font-semibold transition-colors duration-300 ${view === 'layman' ? 'text-brand-primary border-b-2 border-brand-primary' : 'text-brand-gray hover:text-white'}`}
                    >
                        Executive Summary
                    </button>
                </div>

                <div className="bg-brand-dark/50 border border-brand-primary/20 rounded-xl p-8 min-h-[500px]">
                    {isLoading && (
                        <div className="flex flex-col items-center justify-center h-full text-brand-gray">
                            <SpinnerIcon className="w-12 h-12 animate-spin mb-4" />
                            <p className="text-lg">Generating {view === 'technical' ? 'Technical Report' : 'Executive Summary'}...</p>
                        </div>
                    )}
                    {error && (
                        <div className="flex flex-col items-center justify-center h-full text-red-400">
                             <ExclamationTriangleIcon className="w-12 h-12 mb-4"/>
                            <p className="text-lg font-semibold">Generation Failed</p>
                            <p>{error}</p>
                        </div>
                    )}
                    {report && (
                         <div
                            className="prose prose-invert max-w-none text-brand-gray whitespace-pre-wrap"
                            dangerouslySetInnerHTML={{
                                __html: report
                                    .replace(/```(json|bash|shell|html|javascript|css)?/g, '<pre class="bg-brand-dark p-4 rounded-lg border border-brand-primary/20 text-sm overflow-x-auto"><code>')
                                    .replace(/```/g, '</code></pre>')
                                    .replace(/`(.*?)`/g, '<code class="bg-brand-primary/10 text-brand-secondary px-1.5 py-0.5 rounded-md">$1</code>')
                                    .replace(/^(# .*)$/gm, '<h1 class="text-3xl font-bold text-white mt-6 mb-4">$1</h1>')
                                    .replace(/^(## .*)$/gm, '<h2 class="text-2xl font-bold text-white mt-6 mb-4 border-b border-brand-primary/20 pb-2">$1</h2>')
                                    .replace(/^(### .*)$/gm, '<h3 class="text-xl font-bold text-white mt-5 mb-3">$1</h3>')
                                    .replace(/\*\*(.*?)\*\*/g, '<strong class="text-brand-secondary">$1</strong>')
                                    .replace(/\*(.*?)\*/g, '<em>$1</em>')
                                    .replace(/^- (.*)$/gm, '<li class="ml-4 list-disc">$1</li>')
                            }}
                         />
                    )}
                </div>
            </div>
        </div>
    );
};

export default PentestReportPage;